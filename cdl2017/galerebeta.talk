@designsize=1024x768

@ Haiku, 16 ans de galère!

Adrien Destugues \/ PulkoMandy
Capitole du Libre 2017

!cake.jpg

@ Haiku en 10 secondes

!1
* Système d'exploitation créé en 2001
* Libre, développé par des bénévoles
* Dernière version: alpha4, fin 2012

!desktop.png

@ 16 ans de Galère
Faire un point sur l'avancée du projet
...et sur les choses qui n'avancent pas!

* Organisation interne
* Accueil de nouveaux contributeurs
* La communauté autour du projet
* Administration système
* Gestion du budget

!galere.jpg

@ Organisation interne

!1
Organisation, vraiment?
* Équipe de dévelopeurs bénévoles
* Pas de hiérarchie
* Coordination par mailing list

!herdingcats.jpg

!2
Processus de décision
* Officiellement, Haiku est une "méritocratie"
** L'autorité par le respect des autres
** Décisions prises par concensus
^ difficile quand il y a trop de monde
* Décisions par vote si un concensus ne peut être atteint
* Discussions ouvertes (mailing list publique)
** Interventions peu pertinentes de gens extérieurs au projet

* En pratique, c'est celui qui écrit le code qui décide
** Parfois il vaut mieux implémenter que discuter!

!3
Bus factor
* "Le projet survit-il si N développeurs sont écrasés par un bus ?"
** Contributeurs qui quittent le projet
** Heureusement toujours joignables dans notre cas
* Efforts de documentation insuffisants
** Réflexe à prendre: convertir les messages sur la mailing list
^ en documentation technique
!bus.jpg

!4
Revue de code

Tous les changements sont relus après-coup,
^ alors qu'ils sont déjà intégrés
** Difficile de traiter les gros changements
** Pas de garantie que le code soit effectivement relu
** Frustration quand il faut réécrire du code déjà intégré

Projet de passage à Gerrit, relecture avant intégration

!5
Ce qui fonctionne :
* Code propre et lisible, donc maintenable
* Communauté et équipe accueillante
** à condition d'être un minimum motivé pour participer…

@ Accueil de contributeurs

!1
Accueillir des nouveaux n'est pas facile.
* Comprendre but du projet
* Travailler avec l'équipe existante
* Être indépendant

Par ou commencer?
* Contributeurs ne sachant pas quoi faire
* Longue liste de problèmes
* Utiliser Haiku et voir par soi-même

!octopus.jpg

!2
Ce qui fonctionne :
* "Tâches faciles"
* Documentation pour compiler
^ et modifier Haiku

Le Google Code-In aide à améliorer les choses
(documentation utilisable par des 13-17 ans)

!wallace.jpg

!3
Processus de recrutement inefficace
* Demande beaucoup d'investissement
^ des nouveaux contributeurs
* Permet de maintenir le niveau et la cohésion de l'équipe

Co-optation par les développeurs actifs
Accepté si pas de réponse négative pendant 15 jours

* Difficile de refuser quelqu'un sans le vexer
^ après que la proposition a été faite
* Encore plus difficile une fois qu'elle a été acceptée
^ (3 cas, dont 1 s'est effectivement terminé par une exclusion)

!4
Gestion des contributions externes
* Certains patches pas mergés depuis 6 ou 7 ans
** Premier retour rapide avec demandes de modifications
* Faire accepter un patch demande plus de travail que prévu
* Respect strict des règles de formatage du code
** Pénible mais indispensable

!5
Participation au Google Code-In et Summer of Code
* Investissement important des développeurs et de la communauté
* Beaucoup de participants ne deviennent pas contributeurs
* Malgré tout, intéressant


@ Gestion de la communauté

!1
Pas seulement les contributeurs
Communauté: forums, mailing lists, canaux IRC
N'importe qui peut entrer et participer
* Ouvert à tous
* Pas toujours une bonne chose

!2
Quelques exemples
* Faux rapports de bugs
* Fausses contributions
* Critiques non constructive et systématiques

!3
Ceux qui veulent réorienter le projet
* À chaque version de macOS :
** Une vague d'utilisateurs espérant retrouver leurs habitudes

* Un exemple sur l'apparence graphique de Haiku
** Demande de faire plus de dégradés et d'arrondis
** Demande de faire plus de flat design
^ quelques années plus tard
* Le choix de Haiku est donc un bon compromis!

Acceptable, s'il y a des efforts pour faire les changements.

!4
Ce qui fonctionne :
* Utilisateurs frustrés qui finissent par
^ apprendre le C++ pour corriger eux-mêmes les bugs
* Rapports de bugs de qualité
^ et avec un bon suivi par le rapporteur
* Communauté accueillante
** Support technique
** Entraide

!madhacker.gif

# La majorité des problèmes vient d'un très petit nombre de personnes

@ Administration Système
!1
Garder les serveurs en état de marche…
* Précédement hébergé sur sourceforge (CVS)
^ puis BerliOS (SVN)
** Problèmes de disque dur plein régulièrement
* Solution : l'auto-hébergement
** Fonctionne bien... tant qu'il y a un sysadmin!

!jurassic-park.jpeg
# encore un travail ingrat

!2
Rôle difficile à partager
* Données sensibles (mots de passe, clés privées)
Mais indispensable de le faire
* Encore le "bus factor"
* Trop de travail pour une seule personne
** Demande de toujours plus de services
** Application de traduction, revue de commits, site, forum, …


@ Administratif
!1
Haiku, inc, association "support" du projet
* Fonctionnement opaque
* Travail peu gratifiant
* Fonctionnemnt inhabituel
** Pas d'ingérence dans les décisions techniques
** Laisse aux développeurs leur indépendance
** S'assure que l'argent ne donne pas le pouvoir

!2
* Manque de renouvellement des membres
* Lenteur des décisions
* Données sensibles
** compte en banque
** informations personelles des développeurs sous contrat

Difficile d'avoir un fonctionnement ouvert et communautaire

@ Fear of release

!1
"ça sortira quand ça sera prêt"
Projet créé en 2001, première version "alpha" en 2009
Pas de nouvelle version depuis 2012
* Exigence de qualité très (trop?) haute
* Ambitions professionelles, mais sans les moyens
* Support de versions stables qui demande des efforts
#** Beaucoup de projets ne le font pas!

!dragons.jpg

!2
Une release, pour quoi faire?
* Il est possible d'utiliser les "nightly builds"
** quand ils fonctionnent!
* Problèmes de compatibilité d'une version à l'autre
* Fonctionnalités expérimentales
* Régressions

!3
"What's the difference?"
* Release ou pas, c'est le même code et la même équipe!
* Un peu d'attention pour corriger les bugs
** mais ça devrait toujours être le cas!
* Pour la publicité
** Mais il faut être au niveau pour ne pas décevoir!

!wargames.png

@ Communication
!1
Pas grand chose à part le site internet
* Présence timide sur les réseaux sociaux
** Des gens surpris d'apprendre que le projet existe toujours
* Présence à quelques conférences
** Uniquement en France, ou presque
** Parfois, même pas par des membres du projet

!tron.jpg

!2
Résultat: les autres communiquent à notre place
* Pas toujours sur les sujets les plus intéressants à notre avis
* Pas toujours aux moments les plus pertinents
** Revue vidéo de Haiku
^ où le navigateur web n'affiche aucune page
#** (bon ok, en vrai il est souvent cassé)

!superman.jpg

@Conclusion

Le projet a survécu à beaucoup de choses
La patience est indispensable
Ne pas oublier de s'amuser!

!funky.jpg

@Crédits photos
!1
Cake - Worms World Party, (c) 2001 Team 17
Galérien - Asterix, © 2017 GOSCINNY - UDERZO
Devise Shadok - (c) 1968 Jacques Rouxel
Les Aristochats - (c) 1970 Disney
Dilbert - (c) 1989-2017 Scott Adams
The Magical School Bus - (c) 2003-2006 Joanna Cole, Bruce Degan
Merlin l'enchanteur - (c) 1963 Disney
!2
Octopus - (c) 19?? Tex Avery
Wallace & Gromit - (c) 1989-2010 Nick Park
Jurrasic Park - (c) 1993 Universal Pictures
Monty Python and the Holy Grail - (c) 1975 The Monty Python
Wargames - (c) 1983 Metro-Goldwyn-Mayer, United Artists
Tron - (c) 1982 Disney
Lois & Clark - (c) 1993-1997 ABC
Funky Cops - (c) 2002 Thierry Sapyn
