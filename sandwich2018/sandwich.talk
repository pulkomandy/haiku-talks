@designsize=1024x768
@canvascolour=#336699

@ Le système d'exploitation Haiku

Adrien Destugues \/ PulkoMandy
Sandwich Techno @ Viveris - Juin 2018

@ Bienvenue !

@ Historique

@!bttf.jpg

@Apple, 1985

!1
Steve Jobs est viré de Apple
car les ventes de Macintosh ne sont pas aux niveaux attendus
Il part avec une partie des ingénieurs et va fonder NeXT
	(on en reparlera).

!2
Jean Louis Gassée prend la tête de la division Macintosh:
* Macintosh II et SE (machines évolutives),
* Macintosh portable,
* Début du travail sur l'Apple Newton
- (précurseur de l'iPod et de l'iPhone)


@!homealone.jpg

@Apple, 1990

Jean-Louis Gassée est viré de Apple
car les ventes de Macintosh ne sont pas aux niveaux attendus
Il part avec une partie des ingénieurs et va fonder Be.

@La micro-informatique en 1990
Contexte:

Débuts du CD-ROM,
On commence à parler de multimédia mais…

@Macintosh
!system602.gif








Pas de multitâche, pas de couleur

@Atari TOS









!tos162.png

Pas de multitâche

@Windows 3.0
!win30.png












Multitâche coopératif
Commence juste à être crédible

@AmigaOS
!workbench20.gif













Multitâche préemtptif, pas de protection mémoire
Toolkit graphique incomplet

@NeXTStep
!2
!nextstep.png
!1





Multitâche préemptif, protection mémoire
API orientée objet (en Objective-C)
Pas de couleur, mais haute résolution


@ Be inc

Objectif: créer un système moderne pour le "multimédia"
et l'informatique personnelle

Inspiré par l'existant: Macintosh, AmigaOS, UNIX, NeXT

Logiciel et matériel (comme tout le monde, sauf Microsoft\/PC)

@ La BeBox

2 CPU Hobbit + 3 DSP (pour le son, l'image, le modem)
	Plus flexible et moins cher que des "custom chips"
	(comme sur Amiga),
	Plus performant qu'une architecture "tout logiciel"

@ BeOS

Un système moderne:
	- multitâche préemptif,
	- compatible POSIX,
	- protection mémoire
Utilisation de C++ pour les APIs du système
	(language tout récent à l'époque)

@ L'abandon du Hobbit

Début 1994:
AT&T stoppe le développement du Hobbit

Passage au PowerPC comme Apple.
Abandon des DSP (finalement peu pratiques avec un système
multitâche).

Dans un premier temps, Be construit son propre matériel
basé sur PReP (architecture standard définie par IBM).

Le but est de vendre l'OS, mais personne ne proposait
de machine appropriée!

Fin 1995: premières démonstrations du système
(juste après la sortie de Windows 95).

@ Pendant ce temps chez Apple...

Pendant ce temps chez Apple, ouverture de MacOS à d'autres
constructeurs avec PReP et CHRP.

On a donc d'un seul coup plusieurs fabricants de machines
PowerPC!

Août 1996: BeOS fonctionne sur les machines Power Computing
et les PowerMac d'Apple (suite à un malentendu avec les
organisateurs de l'Apple Developer Conference). Des
négociations sont en cours avec Apple, qui veut acheter
BeOS pour le Macintosh.

Décembre 1996: Power Computing vendra des machines
avec BeOS préinstallé.

@ Le rachat de NeXT

Finalement, Apple achète NeXT début 1997.
C'est le retour de Steve Jobs chez Apple.

Février 1997: fin de la fabrication de la BeBox.
Be devient uniquement vendeur de BeOS et commence
à travailler sur une version x86 avec l'aide d'Intel.

Août 1997: Apple met un terme aux "clones" et à CHRP
(mais Be l'avait vu venir)

@ La version x86

Septembre 1997: BeOS est repositionné comme
"Le système pour le multimedia". Objectif:
cohabiter avec Windows, pas le remplacer.

Décembre 1997: première diffusion de la version x86.

@ Hitachi Flora Prius

Novembre 1998: Hitachi annonce le Flora Prius, une machine
qui sera vendue avec Windows et BeOS en double boot.

Mars 1999: les machines sont finalement livrées avec BeOS
installé… mais invisible! Le contrat de licence OEM de
Microsoft ne permet pas de l'installer en double boot avec
un autre système.

@ BeIA

Dans ces conditions, il n'y a plus de business model pour Be
sur le marché du PC.

Septembre 1999: Be se lance sur le marché des
"Internet Applicances" (l'idée de départ est celle de l'IoT
aujourd'hui).

Début 2000: annonce de BeIA qui devient le but principal de Be.
Il s'agit un peu d'un ancêtre du Chromebook.
Libération des sources du Traker et de la DeskBar.

@ La fin de Be

BeIA est disponible sur quelques machines, mais ce n'est pas
un grand succès. Be tente une autre reconversion sur le marché
des chaînes stéréo connectées, mais finalement l'entreprise
est rachetée par Palm.

Une partie de la techno de Be est intégrée dans Cobalt, un
projet d'OS pour PDAs qui ne sera jamais uilisé par personne.

Une partie des employés vont alors rejoindre Android.
Aujourd'hui, une grande partie de la même équipe travaille
chez Google sur Zircon.

@ Haiku - Historique

Suite à l'abandon de BeOS, les développeurs d'applications
s'interrogent sur la suite à donner. Rapidement, l'idée de
réécrire le système est lancée.

Le projet est ambitieux, mais le travail commence par
quelques morceaux "faciles". En 2002, le premier
composant de Haiku est livré: la fenêtre de configuration
des écrans de veille!

@ Les débuts

Réutilisation de code existant:
- Tracker et DeskBar de BeOS
- Mail Daemon Replacement

Patches pour BeOS en attendant:
- Support des CPU avec SSE2
  (provoquent un crash du Kernel)
- "RAM Limiting Bootloader"
  pour les machines avec plus de 1Go de RAM
- Nouveaux pilotes (USB, cartes graphiques Radeon)

@ Premiers accomplissements

Juillet 2005: Haiku peut démarrer "jusqu'au bureau"
Avril 2008: Haiku peut se compiler lui-même
Janvier 2009: support de gcc4
Septembre 2009: la version Alpha 1

@ Maturité

Versions suivantes en 2010, 2011, 2012:
- En 2010, un sondage pour réévaluer le contenu de la version 1
- Support du wifi
- Intégration d'un navigateur web (basé sur WebKit)
- Début du travail sur le gestionnaire de paquets

Pas d'autre version depuis 2012. Bientôt une Beta 1?

@ Autres projets
!1
Tout le monde n'adhère pas à l'idée d'un nouvel OS

Zeta
- YellowTab (entreprise allemande) fournit des versions
  mises à jour de BeOS. Doute persistant sur la légalité
  de ce projet (pas de preuve qu'ils avaient le droit
  d'utiliser les sources de BeOS)

BlueEyedOS
- Base Linux\/GNU\/X11, API compatible avec BeOS
- Lesapplications doivent être recompilés
- Très rapidement fonctionnel
- Moins intéressant techniquement
- Sources jamais publiées malgré des promesses
- Modèle de développement trop fermé

!2
Cosmoe
- Similaire à BlueEyedOS, mais utilise les sources de Haiku
- Resté à l'état de prototype par manque de temps

BeFree, GnuBE, ETK++
- Un toolkit (type Qt) s'intégrant avec un OS existant
  (Linux ou Windows)
- Permettrait de développer pour BeOS mais de quand même
  atteindre d'autres plateformes
- Pas vraiment intéressant face à Qt

!3
beunited.org
- Une entité pour standardiser les évolutions de BeOS proposées
- Similaire à POSIX pour UNIX
- Abandonné lorsque Haiku est le dernier projet actif

@ Objectifs de Haiku
!1 2
OS compatible avec BeOS au niveau binaire
(drivers, applications, etc)

!2
(plus vraiment pertinent aujourd'hui)
!3
Garder l'"esprit" de BeOS: léger, facile à utiliser,
bien intégré, flexible

Plus vraiment un projet sérieux aujourd'hui
(on va pas remplacer macOS ni Windows…)
- Pour la culture technologique et l'expérience
	(voire l'expérimentation)
- Pour la "technodiversité"

!4
Logiciel libre

Partager du code avec BeOS, Zeta ou d'autres

@ Organisation du projet
!1
Pas de "leader"
Décisions par concensus
	-> Necessité de limiter qui peut prendre part aux discussions
	-> Co-optation par les membres du projet
	-> Requis: comprendre "the Haiku way"

Globalement:
- Faire les choses proprement
- Ne pas cacher les problèmes, mais faire ce qui est nécessaire
	pour les résoudre correctement
- Garder l'esprit de BeOS (simplicité, flexibilité, cohésion)
!2
En grande majorité, devs. sur leur temps libre et bénévolement

Exceptions:
- Contrats (2 mois à 1 an)
- GSoC
- "bounties"

@ Financement

Donations par les utilisateurs

Servent à payer les serveurs, rembourser les frais
pour déplacements à diverses conférences
(RMLL, Capitole du Libre, ...)
Organiser des "coding sprints"
Payer des dévs à plein temps

Dons géré par 2 associations: Haiku inc (US) et HSA (Allemagne)



@ Concepts principaux

Un système moderne
* API orientée objet en C++
* Fonctionnement multithread
* Utilisation d'attributs de fichiers étendus

Des applications intégrées
* Utilisation du drag'n'drop
* Scripting et shell
* Stack and tile

Une prise en main facile
* Tout est accessible graphiquement
* Tout est accessible en ligne de commande
* Une API unifiée et découpée en "Kits"

@ Apperçu du système

Le code de Haiku est principalement en C++
^ (y compris le noyau)
* Un langage un peu plus haut niveau que le C,
^ mais adapté à la programmation d'un OS
* La plupart des fonctionalités ne sont pas disponibles en C
* API POSIX disponible (mais encore incomplète)
* Découpage en "Kits" (API) et serveurs (démons)

@ Kits et serveurs
	Support Kit (strings, threads, locks, …)
:Support Kit
	Application Kit et registrar (gestion des applications)
:Application Kit
	Interface Kit et app_server (interface graphique)
:Interface Kit
	Storage Kit (stockage, fichiers)
:Storage Kit
	Translation Kit (conversion de formats de données)
:Translation Kit
	Package Kit (gestionnaire de paquets)
:Package Kit
	Kernel Kit, Device Kit (noyau et pilotes de périphériques)
:Kernel Kit
	Network Kit, Mail Kit (accès au réseau)
:Network Kit
	Media Kit, Game Kit, MIDI Kit, OpenGL Kit (son et vidéo)
:Media Kit


@ Application Kit
!1
Objectif: faciliter la programmation multithread
(pour tirer partie de l'architecture SMP de la BeBox)

Problématique: c'est compliqué et piégeux!

Solution: une API de passage de messages qui évite
le partage de données
!2
BLooper: un thread avec une boucle de gestion de messages
BHandler: objet qui traite les messages (MessageReceived)

BMessage: un... message!
* Identifiant (entier 32 bits)
* Conteneur générique
* Accès par clés
^ (chaîne de caractère + identifiant de type + index)
* Valeurs: types primitifs, messages imbriqués,
^ pointeurs, données brutes
!3
BArchivable: un objet qui peut être "archivé" (sérialisé)
dans un message.

Possibilité de transférer un objet C++ à un autre thread,
à une autre application, à une autre machine, …

@ Applications

BApplication: le looper principal d'une application
* Identifiée par un type MIME
* Gestion des arguments et des fichiers passés
** en ligne de commande
** par glisser-déposer

BRoster: registre des applications (en cours d'exécution ou pas)
* Lister les documents récents
* Trouver et lancer l'application appropriée pour un fichier donné
* Lancer une application à partir de son type MIME
* Envoyer un message à toutes les applications
^ ou à une application spécifique

@ Scripting

Interface standardisée pour contrôler les applications
* Enumération des propriétés disponibles
* Manipulation de ces propriétés via des actions
** EXECUTE, GET, SET, CREATE, DELETE
* Accessible en ligne de commande avec l'outil "hey"
* Préfigure Binder qui est utilisé par Android

Applications possibles: automatisation,
interfaçage d'applis graphiques, lecteur d'écran, …

@ Interface Kit
!1
L'"Interface Kit" regroupe les APIs pour l'interface graphique.

Chaque fenêtre (BWindow) est un BLooper
(avec son thread dédié).
Chaque vue (BView) est un BHandler attaché à la fenêtre

Les traitements longs sont faits dans le thread de l'application
(BApplication). Les fenêtres sont donc toujours réactives.

Attention toutefois au problèmes
de synchronisation entre threads.
!2
BControl: un "contrôle" (bouton, liste, slider, ...)
* Une valeur, une action ("invoke") qui envoie un message

BButton, BSlider, BListView, BScrollbar, …

@ app_server

L'affichage est géré par app_server qui communique avec les
drivers vidéos via les accelerants.

* Rendu graphique côté serveur, donc pas de gel
^ de la boucle d'évènements de la fenêtre
* Transparence réseau (remote_app_server)


@ Storage Kit
!1
Gestion des fichiers…

* Attributs étendus (xattrs)
** typés et sans limite de taille pour BFS
** Utilisés pour stocker données et métadonnées
** Peuvent être indexés et requêtés

* Surveillance de nœeuds (node monitoring)
** Recevoir une notification à chaque changement
^ d'un fichier ou dossier

Si on associe les 2, ça devient intéressant:
requête sur les attributs avec mise à jour en
direct des résultats.
!2
Exemples de métadonnées:
* Courriel (sujet, expéditeur, …)
* Contacts (nom, adresse, …)
* Musique (auteur, titre, album, …)
* Signature MIME des applications, icônes
* Taille et position de fenêtres

@ BArchivable

Stocker l'état d'un objet dans un BMessage
et reconstruire un clone de cet objet
* À partir d'une archive stockée dans un fichier
* Ou reçue par le réseau
* Ou venant d'une autre application

Exemples d'utilisation
* Glisser-déposer
* Replicants (insérer une vue d'une application
^ dans une autre)
* Conception d'interface graphiques


@ Translation Kit
Conversion de formats de données
* Négociation d'un format commun
* Chargement du traducteur sous forme d'add-on
* API standard permettant l'ajout de nouveaux formats
^ sans modifier les applications

Exemples d'utilisation
* Enregistrer une image
* Acquérir une image
** Depuis un fichier, une webcam, un scanner
* Enregistrer et lire du texte formatté
** BTextView <> RTF, DOC, HTML, …


@ Package kit
!1
Le petit dernier dans Haiku
Gestion des logiciels et des mises à jour
Résolution des dépendances

Compromis entre la facilité de distribution de BeOS
(décompresse, met le ou tu veux, c'est installé)
et la facilité d'administration de Linux
(mises à jour de sécurité automatiques)
!2
Solution retenue: packagefs
- Les paquets ne sont pas extraits
- La désinstallation est facile, juste supprimer le paquet
- Modèle transactionnel (retour en arrière possible)

Le noyau lui-même est dans un paquet,
donc même le bootloader a été impacté!

@ Mais au fait, c'est quoi un projet libre?

Au minimum:

* Du code
* Une license
* Un développeur (au moins)
* Un utilisateur (au moins)

@ Haiku en chiffres

* 6 millions de lignes de code
* License MIT
* Une trentaine de développeurs
* Pas de comptage des utilisateurs

@ Organisation:
 * Un projet (www.haiku-os.org)
 * Deux associations (Haiku, Inc et HSA)
 * Une communauté

@ Localisation
* Allemagne, France, USA, Nouvelle Zélande, …
* Traductions:
  ** 40 langues en cours (y compris l'Esperanto)
  ** 30 à peu près complètes

@ Communauté
  * Utilisateurs
  ** Nombre inconnu!
  * Rapporteur de bugs
  * Forums, mailing lists,
	canaux IRC ou salons XMPP
  * HUGs locaux (par pays)
  * Autres sites web
    ** UBIX, IsComputerOn, BeBytes,…
  * Traductions
  * Support utilisateur, entraide
  * Présence à des conférences et évènements
	autour du logiciel libre

@ Soutiens techniques
  * Apprentissage du C++ pour aider le projet
  * Hébergement de machines de build
    pour l'intégration continue
  * Développement de nouvelles applications
  * Contribution de patches pour Haiku

@ Haiku, Inc
* Créée en juin 2003 par le fondateur du projet
* Non-profit 501(c)3 
  (similaire aux associations loi 1901, aux US)
* Objectif: séparer les fonds projet
de son compte en banque personnel
* Gestion des finances
* Détentrice du copyright sur une partie du code
** au choix des développeurs
* Détentrice des marques déposées
* "représentant légal" du projet
* Pas d'intervention sur les décisions techniques

@ Fonctionnement

* Pas d'adhésion payante
* Seulement 6 membres
** Dont 4 sont également dévelopeurs
* Décisions par vote

@ Revenus

* Dons
* Ventes de goodies et de CDs
* Goodsearch
* Google Code-In et Google Summer of Code

@ Dépenses
* Infrastructure du projet
** Hébergement web, git, etc.
** 1 serveur dédié avec tous les services (en Allemagne)
** 1 hébergement web seulement servant de mirroir aux US
** Noms de domaines et certificats SSL
* Conférences et coding sprints
** Frais de déplacement
** Flyers
** Contraintes: dépenses raisonables,
** rapport publié sur le site de Haiku
* Contrats avec les dévelopeurs
** Plutôt mal payé
* Achat de matériel pour le développement de drivers

@ Difficultés

Manque de transparence
* Discussions par mails privés
* Données confidentielles
** Données bancaires
** Informations personelles

Lenteur des décisions
* Manque de temps des membres
* Pas de renouvellement périodique
* Difficulté à réunir le bureau

@ Haiku Support Association
* Groupement d'utilisateurs
* Adhésion payante (36 euros par an)
* 19 membres
* Organisation de la conférence BeGeistert
et du coding sprint

@ Le projet Haiku
* Entité informelle
* Développeurs ayant accès au git
* Décisions prises par concensus
* … ou par vote si aucun compromis n'est trouvé

@ Workflow
* Dépot Git + Gerrit (revue de code)
* Suivi de bugs avec Trac
* Mailing lists et canaux IRC pour les discussions

@ Devenir contributeur

* Comprendre "la Voie de Haiku"
* Contribuer
** Patches, rapports de bugs, support utilisateur
* Gagner la confiance des contributeurs
* Proposition sur la mailing list
** Décision par concensus

@ Dysfonctionnements

C'est celui qui code qui décide
* Décision par vote inutile s'il n'y a personne
  pour la mettre en pratique
Manque de contributeurs dans tous les domaines
* pas seulement des codeurs!
Organisation complexe
Difficulté à prendre des décisions
* Discussions sans fin

@ Les projets satellites:
* haikuports,
* haikudepot server,
* haikuarchives,
* 3rd party apps

@ HaikuArchives

* Abandonware pour BeOS
* Pas de mainteneurs
* Projets développés pendant le GCI

@ HaikuPorts

* "ports" (comme pour les BSD)
* écriture de recettes: contribution assez facile
** (pas toujours besoin de parler le C++)

@ HaikuDepot server

Interface web pour la gestion des paquets
* Ajout de captures d'écran,
* Traduction des descriptions,
* Notation des paquets
* Service web pour le client natif

@ Les contributions upstream:
* Trac (suivi de bugs et demandes d'amélioration)
** Plusieurs "hacks" (plug-ins)
** Composants hiérarchisés, outils de documnetation…
* Pootle (traductions en ligne)
** Support des fichiers "catalogs"
   pour les traductions de Haiku
* libsolv (résolution de dépendances pour les paquets)
** Utilisé par OpenSUSE
* clang, cmake, SDL, …
** Nombreux projets, portés principalement par HaikuPorts
* Les forks: gcc, glibc, mesa, ffmpeg
** Anciennes versions compatibles avec BeOS
** Versions récentes disponibles en parallèle
* webkit (moteur HTML/CSS/Javadscript)
** Trop rapide pour nous…

@ Les évènements
* BeGeistert (organisé par HSA)
** Conférence et Coding Sprint
* GSoC et GCI
** Encadrement de lycéens et d'étudiants
** Initiation à l'open source
** Financé par Google
* Participation à d'autres évènements
** Capitole du Libre
** FOSDEM
** Ohio Linux Fest
** ...

@ Projets commerciaux
* TuneTracker Systems
* iZCorp

